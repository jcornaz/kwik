package com.github.jcornaz.kwik.evaluator

import com.github.jcornaz.kwik.simplifier.api.ExperimentalKwikFuzzer
import com.github.jcornaz.kwik.fuzzer.api.Fuzzer
import com.github.jcornaz.kwik.generator.api.randomSequence


/**
 * Call multiple times [block] with random values generated by the given [fuzzer]
 *
 * The [block] must perform assertions and throw an exception if the property is falsified.
 * Absence of exception thrown in the [block] means the property is satisfied.
 *
 * @param iterations Number of times [block] should be executed
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param block Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Must return a throw an exception if the property is falsified.
 */
@ExperimentalKwikFuzzer
fun <T> forAny(
    fuzzer: Fuzzer<T>,
    iterations: Int = kwikDefaultIterations,
    seed: Long = nextSeed(),
    block: (T) -> Unit
) {
    require(iterations > 0) { "Iterations must be > 0, but was: $iterations" }

    val unsatisfiedGuarantees = fuzzer.guarantees.toMutableList()
    var iterationDone = 0

    val inputIterator = fuzzer.generator.randomSequence(seed).iterator()

    do {
        val input = inputIterator.next()

        val guaranteesIterator = unsatisfiedGuarantees.listIterator()
        while(guaranteesIterator.hasNext()) {
            if (guaranteesIterator.next().invoke(input))
                guaranteesIterator.remove()
        }

        try {
            block(input)
        } catch (throwable: Throwable) {
            throw FalsifiedPropertyError(iterationDone + 1, iterations, seed, listOf(input), throwable)
        }

        ++iterationDone
    } while (iterationDone < iterations || unsatisfiedGuarantees.isNotEmpty())
}
