package com.github.jcornaz.kwik

import kotlin.random.Random

private const val DEFAULT_ITERATIONS: Int = 200

/**
 * Call multiple times [property] with random values generated by the given [generator]
 *
 * The [property] must perform assertions
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Should perform assertions.
 */
fun <A> checkForAll(
    generator: Generator<A>,
    iterations: Int = DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    property: (A) -> Unit
) {
    require(iterations > 0) { "Iterations must be > 0, but was: $iterations" }

    generator.randoms(seed)
        .take(iterations)
        .forEach(property)
}

/**
 * Call multiple times [property] with random values generated by the given generators
 *
 * The [property] must perform assertions
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Should perform assertions.
 */
fun <A, B> checkForAll(
    generatorA: Generator<A>,
    generatorB: Generator<B>,
    iterations: Int = DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    property: (A, B) -> Unit
): Unit = checkForAll(generatorA zip generatorB, iterations, seed) { (a, b) -> property(a, b) }

/**
 * Call multiple times [property] with random values generated by the given generators
 *
 * The [property] must perform assertions
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Should perform assertions.
 */
fun <A, B, C> checkForAll(
    generatorA: Generator<A>,
    generatorB: Generator<B>,
    generatorC: Generator<C>,
    iterations: Int = DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    property: (A, B, C) -> Unit
): Unit = checkForAll(
    generatorA = generatorA zip generatorB,
    generatorB = generatorC,
    iterations = iterations,
    seed = seed
) { (a, b), c -> property(a, b, c) }

/**
 * Call multiple times [property] with random values generated by the given generators
 *
 * The [property] must perform assertions
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Should perform assertions.
 */
fun <A, B, C, D> checkForAll(
    generatorA: Generator<A>,
    generatorB: Generator<B>,
    generatorC: Generator<C>,
    generatorD: Generator<D>,
    iterations: Int = DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    property: (A, B, C, D) -> Unit
): Unit = checkForAll(
    generatorA = generatorA zip generatorB,
    generatorB = generatorC zip generatorD,
    iterations = iterations,
    seed = seed
) { (a, b), (c, d) -> property(a, b, c, d) }

/**
 * Call multiple times [property] with random values generated by the given [generator]
 *
 * The [property] must return a boolean representing if the property is satisfied
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Must return a boolean (true = satisfied, false = falsified)
 */
fun <A> forAll(
    generator: Generator<A>,
    iterations: Int = DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    property: (A) -> Boolean
) = checkForAll(generator, iterations, seed) {
    if (!property(it)) throw AssertionError("Property falsified with: $it")
}

/**
 * Call multiple times [property] with random values generated by the given generators
 *
 * The [property] must return a boolean representing if the property is satisfied
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Must return a boolean (true = satisfied, false = falsified)
 */
fun <A, B> forAll(
    generatorA: Generator<A>,
    generatorB: Generator<B>,
    iterations: Int = DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    property: (A, B) -> Boolean
) = checkForAll(generatorA, generatorB, iterations, seed) { a, b ->
    if (!property(a, b)) throw AssertionError("Property falsified with: $a, $b")
}

/**
 * Call multiple times [property] with random values generated by the given generators
 *
 * The [property] must return a boolean representing if the property is satisfied
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Must return a boolean (true = satisfied, false = falsified)
 */
fun <A, B, C> forAll(
    generatorA: Generator<A>,
    generatorB: Generator<B>,
    generatorC: Generator<C>,
    iterations: Int = DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    property: (A, B, C) -> Boolean
) = checkForAll(generatorA, generatorB, generatorC, iterations, seed) { a, b, c ->
    if (!property(a, b, c)) throw AssertionError("Property falsified with: $a, $b")
}

/**
 * Call multiple times [property] with random values generated by the given generators
 *
 * The [property] must return a boolean representing if the property is satisfied
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Must return a boolean (true = satisfied, false = falsified)
 */
fun <A, B, C, D> forAll(
    generatorA: Generator<A>,
    generatorB: Generator<B>,
    generatorC: Generator<C>,
    generatorD: Generator<D>,
    iterations: Int = DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    property: (A, B, C, D) -> Boolean
) = checkForAll(generatorA, generatorB, generatorC, generatorD, iterations, seed) { a, b, c, d ->
    if (!property(a, b, c, d)) throw AssertionError("Property falsified with: $a, $b")
}
