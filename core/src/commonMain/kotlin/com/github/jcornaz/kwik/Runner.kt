package com.github.jcornaz.kwik

import kotlin.random.Random

private const val DEFAULT_ITERATIONS: Int = 200

/**
 * Call multiple times [property] with random values generated by the given [generator]
 *
 * The [property] must perform assertions
 *
 * @param generator Generator to use of inputs
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Should perform assertions.
 */
fun <A> checkForAll(
    generator: Generator<A>,
    iterations: Int = DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    property: (A) -> Unit
) {
    require(iterations > 0) { "Iterations must be > 0, but was: $iterations" }

    generator.randoms(seed)
        .take(iterations)
        .forEach(property)
}

/**
 * Call multiple times [property] with random values generated by the given [generator]
 *
 * The [property] must return a boolean representing if the property is satisfied
 *
 * @param generator Generator to use of inputs
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Must return a boolean (true = satisfied, false = falsified)
 */
fun <A> forAll(
    generator: Generator<A>,
    iterations: Int = DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    property: (A) -> Boolean
) = checkForAll(generator, iterations, seed) {
    if (!property(it)) throw AssertionError("Property falsified with: $it")
}
