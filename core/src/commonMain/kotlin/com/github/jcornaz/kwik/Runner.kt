package com.github.jcornaz.kwik

import com.github.jcornaz.kwik.generator.default
import kotlin.random.Random

/**
 * Default number of iterations for [forAll]
 */
const val KWIK_DEFAULT_ITERATIONS: Int = 200

/**
 * Call multiple times [property] with random values generated by the given [generator]
 *
 * The [property] must return a boolean representing if the property is satisfied
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Must return a boolean (true = satisfied, false = falsified)
 */
fun <T> forAll(
    generator: Generator<T>,
    iterations: Int = KWIK_DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    property: (T) -> Boolean
) {
    require(iterations > 0) { "Iterations must be > 0, but was: $iterations" }

    println("Iterations: $iterations")
    println("Seed: $seed")

    generator.testValues(seed)
        .take(iterations)
        .forEach {
            if (!property(it)) throw AssertionError("Property falsified with: $it")
        }
}

/**
 * Call multiple times [property] with random values generated by the default generator for the type [T]
 *
 * The [property] must return a boolean representing if the property is satisfied
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Must return a boolean (true = satisfied, false = falsified)
 */
inline fun <reified T> forAll(
    iterations: Int = KWIK_DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    crossinline property: (T) -> Boolean
): Unit = forAll<T>(Generator.default(), iterations, seed) { property(it) }

/**
 * Call multiple times [property] with random values generated by the given generators
 *
 * The [property] must return a boolean representing if the property is satisfied
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Must return a boolean (true = satisfied, false = falsified)
 */
inline fun <reified A, reified B> forAll(
    generatorA: Generator<A> = Generator.default(),
    generatorB: Generator<B> = Generator.default(),
    iterations: Int = KWIK_DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    crossinline property: (A, B) -> Boolean
): Unit = forAll(generatorA.combineWith(generatorB), iterations, seed) { (a, b) ->
    property(a, b)
}

/**
 * Call multiple times [property] with random values generated by the given generators
 *
 * The [property] must return a boolean representing if the property is satisfied
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Must return a boolean (true = satisfied, false = falsified)
 */
@Suppress("LongParameterList")
inline fun <reified A, reified B, reified C> forAll(
    generatorA: Generator<A> = Generator.default(),
    generatorB: Generator<B> = Generator.default(),
    generatorC: Generator<C> = Generator.default(),
    iterations: Int = KWIK_DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    crossinline property: (A, B, C) -> Boolean
): Unit = forAll(generatorA.combineWith(generatorB), generatorC, iterations, seed) { (a, b), c ->
    property(a, b, c)
}

/**
 * Call multiple times [property] with random values generated by the given generators
 *
 * The [property] must return a boolean representing if the property is satisfied
 *
 * @param iterations Number of times [property] should be called
 * @param seed Random generation seed. Random by default. Specify a value to reproduce consistent results
 * @param property Function invoked multiple times with random inputs to assess a property of the System under test.
 *                 Must return a boolean (true = satisfied, false = falsified)
 */
@Suppress("LongParameterList")
inline fun <reified A, reified B, reified C, reified D> forAll(
    generatorA: Generator<A> = Generator.default(),
    generatorB: Generator<B> = Generator.default(),
    generatorC: Generator<C> = Generator.default(),
    generatorD: Generator<D> = Generator.default(),
    iterations: Int = KWIK_DEFAULT_ITERATIONS,
    seed: Long = Random.nextLong(),
    crossinline property: (A, B, C, D) -> Boolean
): Unit = forAll(
    generatorA = generatorA.combineWith(generatorB),
    generatorB = generatorC.combineWith(generatorD),
    iterations = iterations,
    seed = seed
) { (a, b), (c, d) -> property(a, b, c, d) }
